#!/usr/bin/env python3
"""
Recorded Analytics Session - Simple Replay Script

This file is a TEMPLATE. After recording your session:
1. Run: bash record_session.sh
2. Copy the generated code from Playwright Inspector
3. Paste it in the replay_actions() function below (replace the TODO)
4. Run: python3 replay_recorded_session.py

This script will:
- Execute your recorded actions exactly as you performed them
- Create a visual trace with screenshots for debugging
- Serve as a reference "playbook" for working selectors
"""

from playwright.sync_api import sync_playwright, Page
from pathlib import Path
import time


def replay_actions(page: Page):
    """
    Replace this function with the code generated by Playwright Codegen
    
    INSTRUCTIONS:
    1. Run: bash record_session.sh
    2. Perform your actions in the browser
    3. Copy ALL the generated code from the Inspector window
    4. Paste it here, replacing this comment and the TODO line
    
    The generated code will look something like:
        page.goto("https://app.codpartner.com/login")
        page.fill('input[name="email"]', "your@email.com")
        page.click('button:has-text("Login")')
        # ... etc
    """
    
    # TODO: PASTE YOUR RECORDED ACTIONS HERE
    # After running record_session.sh, copy the generated code and paste it here
    
    print("‚ö†Ô∏è  No recorded actions found!")
    print("üìù Please run: bash record_session.sh")
    print("   Then copy the generated code and paste it in this function")
    pass


def main():
    """Execute recorded actions with trace recording enabled"""
    print("=" * 60)
    print("üé¨ Replaying Recorded Session")
    print("=" * 60)
    print()
    
    # Create traces directory if it doesn't exist
    traces_dir = Path(__file__).parent.parent / "traces"
    traces_dir.mkdir(exist_ok=True)
    trace_file = traces_dir / "analytics_session.zip"
    
    print(f"üìπ Recording trace to: {trace_file}")
    print()
    
    try:
        with sync_playwright() as p:
            # Launch browser (visible so you can see what's happening)
            print("üöÄ Starting browser...")
            browser = p.chromium.launch(
                headless=False,  # Show browser
                args=['--disable-blink-features=AutomationControlled']
            )
            
            # Create context with realistic user agent
            context = browser.new_context(
                user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            )
            
            # Start trace recording with all features
            print("üìπ Starting trace recording...")
            context.tracing.start(
                screenshots=True,  # Capture screenshots
                snapshots=True,    # Capture DOM snapshots
                sources=True       # Capture source code
            )
            
            page = context.new_page()
            
            # Execute recorded actions
            print("‚ñ∂Ô∏è  Executing recorded actions...")
            print()
            replay_actions(page)
            
            print()
            print("‚è∏Ô∏è  Pausing for 3 seconds...")
            time.sleep(3)
            
            # Stop trace recording and save
            print("üíæ Saving trace...")
            context.tracing.stop(path=str(trace_file))
            
            browser.close()
            
        print()
        print("=" * 60)
        print("‚úÖ Session replay completed!")
        print("=" * 60)
        print()
        print(f"üìÅ Trace saved to: {trace_file}")
        print()
        print("üîç To view the trace:")
        print(f"   bash view_trace.sh")
        print("   OR")
        print(f"   playwright show-trace {trace_file}")
        print()
        
    except Exception as e:
        print()
        print("=" * 60)
        print(f"‚ùå ERROR: {e}")
        print("=" * 60)
        print()
        print("üí° Troubleshooting:")
        print("   1. Make sure you've recorded actions (run record_session.sh)")
        print("   2. Check that you pasted the generated code in replay_actions()")
        print("   3. Verify your .env file has correct credentials")
        print()
        raise


if __name__ == "__main__":
    main()

